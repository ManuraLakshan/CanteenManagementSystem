

INSERT INTO order_item(cust_id,item_id,order_qunt,total,purchased_states) VALUES('manura@gmail.com',1,2,112.34,1);
INSERT INTO order_item(cust_id,item_id,order_qunt,total,purchased_states) VALUES('manura@gmail.com',1,2,112.34,0);
INSERT INTO order_item(cust_id,item_id,order_qunt,total,purchased_states) VALUES('kelum@gmail.com',1,2,112.34,1);
INSERT INTO order_item(cust_id,item_id,order_qunt,total,purchased_states) VALUES('manura@gmail.com',1,2,112.34,0);
INSERT INTO order_item(cust_id,item_id,order_qunt,total,purchased_states) VALUES('manura@gmail.com',1,2,112.34,0);
INSERT INTO order_item(cust_id,item_id,order_qunt,total,purchased_states) VALUES('manura@gmail.com',2,2,112.34,0);





***************************************Move oder 12.AM*******************************
DELIMITER //
CREATE EVENT move_order_details
ON SCHEDULE EVERY 10 SECOND
STARTS CURRENT_TIMESTAMP
ON COMPLETION PRESERVE
DO
BEGIN

	DECLARE orderId int;
	DECLARE customerId varchar(255);
	DECLARE orderQunty int;
	DECLARE Tot float;
	DECLARE poi int;
	DECLARE first_id int;
	DECLARE row_count int;

	SELECT COUNT(*) INTO row_count FROM order_item ;
	SELECT order_id INTO first_id FROM order_item LIMIT 1;

	 simple_loop: LOOP
	 SELECT row_count;

        IF row_count=0 THEN
	    DELETE FROM order_item;
	    DELETE FROM purchesd_log WHERE point=0;
            LEAVE simple_loop;
        END IF;

	 SELECT order_id INTO orderId FROM order_item WHERE order_id=first_id;
	 SELECT cust_id INTO customerId FROM order_item WHERE order_id=first_id;
	 SELECT order_qunt INTO orderQunty FROM order_item WHERE order_id=first_id;
	 SELECT total INTO Tot FROM order_item WHERE order_id=first_id;
	 SELECT purchased_states INTO poi FROM order_item WHERE order_id=first_id;

	 INSERT INTO purchesd_log(custid,oderid,qunty,total,point) VALUES(customerId,orderId,orderQunty,Tot,poi);

	 SET row_count=row_count-1;
     SET first_id=first_id+1;

	 END LOOP simple_loop;
END //
DELIMITER ;



DROP EVENT move_order_details;
select * from purchesd_log;
select * from order_item;
UPDATE order_item SET purchased_states=1 WHERE order_id = 14;

******************************Calculate revenue*************************************
DELIMITER //
CREATE EVENT revenue_genarate
ON SCHEDULE EVERY 10 SECOND
STARTS CURRENT_TIMESTAMP
ON COMPLETION PRESERVE
DO
BEGIN
	DECLARE dailyRevenue float;
	SELECT SUM(total) INTO dailyRevenue FROM order_item WHERE purchased_states=1;

	INSERT INTO revenue(date,revenue)VALUES(CURRENT_DATE,dailyRevenue);
END //
DELIMITER ;


*******************************Go Invoice***********************
DELIMITER //
CREATE TRIGGER TR_after_purchased
AFTER UPDATE
ON order_item FOR EACH ROW
BEGIN

	DECLARE productName varchar(255);
	DECLARE row_count int;
	DECLARE first_id int;
	DECLARE itemId int;
	DECLARE unitPrice float;
	DECLARE customerId varchar(255);
	DECLARE customerName varchar(255);
	DECLARE Quntity float;
	DECLARE SubTotal float;


	SELECT COUNT(*) INTO row_count FROM order_item WHERE order_id NOT IN (SELECT orderid FROM invoice);
	SELECT order_id INTO first_id FROM order_item WHERE order_id NOT IN (SELECT orderid FROM invoice) LIMIT 1;

	simple_loop: LOOP
		IF row_count=0 THEN
           	LEAVE simple_loop;
        	END IF;

		SELECT cust_id INTO customerId FROM order_item WHERE order_id=first_id;
		SELECT name INTO customerName FROM customer WHERE cust_id = customerId;
		SELECT item_id INTO itemId FROM order_item WHERE order_id=first_id;
		SELECT name INTO productName FROM inventry WHERE inv_id=itemId;
		SELECT unit_price INTO unitPrice FROM inventry WHERE inv_id=itemId;
		SELECT order_qunt INTO Quntity FROM order_item WHERE order_id=first_id;

		SET SubTotal = unitPrice * Quntity;

		INSERT INTO invoice(customerid,customer_name,orderid,itemname,unitprice,sub_total) VALUES(customerId,customerName,first_id,productName,unitPrice,SubTotal);


		SET row_count=row_count-1;
         	SET first_id=first_id+1;

	END LOOP simple_loop;

END //
DELIMITER ;


UPDATE order_item SET  purchased_states=1 WHERE order_id=113;
 update order_item set  purchased_states=1 where order_id=110;

DROP TRIGGER TR_after_purchased;


